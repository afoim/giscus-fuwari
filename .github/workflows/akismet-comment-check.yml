name: Akismet Discussion Comment Checker
on:
  discussion_comment:
    types: [created]

jobs:
  check-akismet:
    runs-on: ubuntu-latest
    steps:
      - name: Check and delete spam comments
        env:
          AKISMET_API_KEY: ${{ secrets.AKISMET_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          COMMENT_BODY: ${{ github.event.comment.body }}
          COMMENT_AUTHOR: ${{ github.event.comment.user.login }}
          COMMENT_URL: ${{ github.event.comment.url }}
          COMMENT_HTML_URL: ${{ github.event.comment.html_url }}
          DISCUSSION_TITLE: ${{ github.event.discussion.title }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          set -uo pipefail
          
          echo "============================================"
          echo "ü§ñ AKISMET SPAM DETECTION STARTED"
          echo "============================================"
          echo "‚è∞ Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "üë§ Comment Author: ${COMMENT_AUTHOR}"
          echo "üìù Comment Length: ${#COMMENT_BODY} characters"
          echo "üóÇÔ∏è Repository: ${REPO_OWNER}/${REPO_NAME}"
          echo "üí¨ Discussion: ${DISCUSSION_TITLE}"
          echo "üîó Comment URL: ${COMMENT_HTML_URL}"
          echo ""
          
          echo "üìÑ COMMENT CONTENT:"
          echo "----------------------------------------"
          echo "${COMMENT_BODY}"
          echo "----------------------------------------"
          echo ""
          
          # È™åËØÅÂøÖË¶ÅÁöÑÁéØÂ¢ÉÂèòÈáè
          echo "üîß ENVIRONMENT CHECK:"
          if [[ -z "${AKISMET_API_KEY:-}" ]]; then
            echo "‚ùå AKISMET_API_KEY is not set"
            exit 1
          else
            echo "‚úÖ AKISMET_API_KEY: ${AKISMET_API_KEY:0:8}..."
          fi
          
          if [[ -z "${GITHUB_TOKEN:-}" ]]; then
            echo "‚ùå GITHUB_TOKEN is not set"
            exit 1
          else
            echo "‚úÖ GITHUB_TOKEN: ${GITHUB_TOKEN:0:8}..."
          fi
          echo ""
          
          # ÊûÑÂª∫ Akismet API ËØ∑Ê±Ç
          echo "üåê AKISMET API REQUEST:"
          AKISMET_URL="https://${AKISMET_API_KEY}.rest.akismet.com/1.1/comment-check"
          echo "üì° API Endpoint: ${AKISMET_URL:0:30}...comment-check"
          echo "üè† Blog URL: https://github.com/${REPO_OWNER}/${REPO_NAME}"
          echo "üñ•Ô∏è User IP: 127.0.0.1 (GitHub Actions default)"
          echo "üï∑Ô∏è User Agent: GitHubActionBot/1.0"
          echo "üìù Comment Type: comment"
          echo ""
          
          echo "üîÑ Sending request to Akismet..."
          AKISMET_RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}\nTOTAL_TIME:%{time_total}" \
            -X POST "$AKISMET_URL" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -H "User-Agent: GitHubActionBot/1.0" \
            --data-urlencode "blog=https://github.com/${REPO_OWNER}/${REPO_NAME}" \
            --data-urlencode "user_ip=127.0.0.1" \
            --data-urlencode "user_agent=GitHubActionBot/1.0" \
            --data-urlencode "comment_type=comment" \
            --data-urlencode "comment_author=${COMMENT_AUTHOR}" \
            --data-urlencode "comment_content=${COMMENT_BODY}" \
            2>/dev/null || echo "ERROR")
          
          # Ëß£ÊûêÂìçÂ∫î
          SPAM_CHECK_RESULT=$(echo "$AKISMET_RESPONSE" | head -n1)
          HTTP_CODE=$(echo "$AKISMET_RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
          RESPONSE_TIME=$(echo "$AKISMET_RESPONSE" | grep "TOTAL_TIME:" | cut -d: -f2)
          
          echo "üìä AKISMET RESPONSE:"
          echo "üìà HTTP Status: ${HTTP_CODE:-unknown}"
          echo "‚è±Ô∏è Response Time: ${RESPONSE_TIME:-unknown}s"
          echo "üéØ Spam Detection Result: '${SPAM_CHECK_RESULT}'"
          echo ""
          
          # Ê£ÄÊü•ÊòØÂê¶‰∏∫ÂûÉÂúæËØÑËÆ∫
          if [ "$SPAM_CHECK_RESULT" = "true" ]; then
            echo "üö® SPAM DETECTED!"
            echo "============================================"
            echo "üóëÔ∏è Attempting to delete spam comment..."
            echo ""
            
            echo "üîç GitHub API DELETE Request:"
            echo "üì° Endpoint: ${COMMENT_URL}"
            echo "üîë Authorization: token ${GITHUB_TOKEN:0:8}..."
            echo "üï∑Ô∏è User-Agent: AkismetBot/1.0"
            echo ""
            
            DELETE_RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}\nTOTAL_TIME:%{time_total}" \
              -X DELETE "$COMMENT_URL" \
              -H "Authorization: token ${GITHUB_TOKEN}" \
              -H "Accept: application/vnd.github+json" \
              -H "User-Agent: AkismetBot/1.0" \
              2>/dev/null || echo "ERROR")
            
            DELETE_HTTP_CODE=$(echo "$DELETE_RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
            DELETE_TIME=$(echo "$DELETE_RESPONSE" | grep "TOTAL_TIME:" | cut -d: -f2)
            DELETE_BODY=$(echo "$DELETE_RESPONSE" | head -n1)
            
            echo "üìä DELETE RESPONSE:"
            echo "üìà HTTP Status: ${DELETE_HTTP_CODE:-unknown}"
            echo "‚è±Ô∏è Response Time: ${DELETE_TIME:-unknown}s"
            
            if [ "$DELETE_HTTP_CODE" = "204" ]; then
              echo "‚úÖ SUCCESS: Spam comment deleted successfully"
              echo "üéâ Comment from @${COMMENT_AUTHOR} has been removed"
            else
              echo "‚ùå FAILED: Could not delete comment"
              echo "üîç HTTP Status Code: ${DELETE_HTTP_CODE}"
              if [[ -n "$DELETE_BODY" && "$DELETE_BODY" != "ERROR" ]]; then
                echo "üìÑ Response Body: ${DELETE_BODY}"
              fi
              
              # Â∞ùËØïËé∑ÂèñÊõ¥Â§öÈîôËØØ‰ø°ÊÅØ
              echo ""
              echo "üîç DEBUGGING - Checking comment accessibility..."
              CHECK_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" \
                -H "Authorization: token ${GITHUB_TOKEN}" \
                -H "Accept: application/vnd.github+json" \
                -H "User-Agent: AkismetBot/1.0" \
                "$COMMENT_URL" 2>/dev/null || echo "ERROR")
              
              CHECK_HTTP_CODE=$(echo "$CHECK_RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
              echo "üîç Comment Check Status: ${CHECK_HTTP_CODE:-unknown}"
              
              if [ "$CHECK_HTTP_CODE" = "200" ]; then
                echo "‚ÑπÔ∏è Comment exists and is accessible"
              elif [ "$CHECK_HTTP_CODE" = "404" ]; then
                echo "‚ÑπÔ∏è Comment not found (may have been deleted already)"
              elif [ "$CHECK_HTTP_CODE" = "403" ]; then
                echo "‚ö†Ô∏è Access forbidden - check token permissions"
              else
                echo "‚ö†Ô∏è Unexpected status when checking comment"
              fi
            fi
            
          elif [ "$SPAM_CHECK_RESULT" = "false" ]; then
            echo "‚úÖ CLEAN COMMENT"
            echo "============================================"
            echo "üü¢ Akismet determined this is NOT spam"
            echo "‚ú® Comment from @${COMMENT_AUTHOR} is allowed"
            
          else
            echo "‚ö†Ô∏è AKISMET ERROR"
            echo "============================================"
            echo "‚ùå Unexpected response from Akismet API"
            echo "üìÑ Raw Response: '${SPAM_CHECK_RESULT}'"
            echo "üìà HTTP Status: ${HTTP_CODE:-unknown}"
            
            if [ "$HTTP_CODE" != "200" ]; then
              echo "üîç This may indicate an API key issue or service problem"
            fi
          fi
          
          echo ""
          echo "============================================"
          echo "üèÅ AKISMET SPAM DETECTION COMPLETED"
          echo "‚è∞ End Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "============================================"
